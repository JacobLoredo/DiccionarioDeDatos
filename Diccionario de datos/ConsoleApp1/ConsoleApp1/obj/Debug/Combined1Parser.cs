//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\yeico\source\repos\ConsoleApp1\ConsoleApp1\Combined1.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApp1 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Combined1Parser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		DirectivaB=32, Directiva=33, CONSH=34, CONSC=35, SL=36, Decimal=37, Hexadecimal=38, 
		Simbolo=39, Palabra=40, WS=41;
	public const int
		RULE_compileUnit = 0, RULE_entradaInicial = 1, RULE_inicio = 2, RULE_codigo = 3, 
		RULE_dir = 4, RULE_ensamblaje = 5, RULE_indexado = 6, RULE_fin = 7, RULE_nemonico = 8, 
		RULE_operando = 9, RULE_numero = 10;
	public static readonly string[] ruleNames = {
		"compileUnit", "entradaInicial", "inicio", "codigo", "dir", "ensamblaje", 
		"indexado", "fin", "nemonico", "operando", "numero"
	};

	private static readonly string[] _LiteralNames = {
		null, "'START'", "','", "'X'", "'RSUB'", "'END'", "'ADD'", "'AND'", "'COMP'", 
		"'DIV'", "'J'", "'RESW'", "'JEQ'", "'JGT'", "'JLT'", "'JSUB'", "'LDA'", 
		"'LDCH'", "'LDL'", "'LDX'", "'MUL'", "'OR'", "'RD'", "'STA'", "'STCH'", 
		"'STL'", "'STSW'", "'STX'", "'SUB'", "'TD'", "'TIX'", "'WD'", "'BYTE'", 
		null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "DirectivaB", "Directiva", 
		"CONSH", "CONSC", "SL", "Decimal", "Hexadecimal", "Simbolo", "Palabra", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Combined1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Combined1Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public EntradaInicialContext entradaInicial() {
			return GetRuleContext<EntradaInicialContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(Combined1Parser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; entradaInicial();
			State = 24;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 23; Match(Eof);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaInicialContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public CodigoContext codigo() {
			return GetRuleContext<CodigoContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public EntradaInicialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entradaInicial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterEntradaInicial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitEntradaInicial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntradaInicial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaInicialContext entradaInicial() {
		EntradaInicialContext _localctx = new EntradaInicialContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_entradaInicial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; inicio();
			State = 27; codigo();
			State = 28; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ITerminalNode Simbolo() { return GetToken(Combined1Parser.Simbolo, 0); }
		public DirContext dir() {
			return GetRuleContext<DirContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(Simbolo);
			State = 31; Match(T__0);
			State = 32; dir();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodigoContext : ParserRuleContext {
		public EnsamblajeContext ensamblaje() {
			return GetRuleContext<EnsamblajeContext>(0);
		}
		public CodigoContext codigo() {
			return GetRuleContext<CodigoContext>(0);
		}
		public CodigoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codigo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterCodigo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitCodigo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodigo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodigoContext codigo() {
		CodigoContext _localctx = new CodigoContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_codigo);
		try {
			State = 38;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; ensamblaje();
				State = 35; codigo();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; ensamblaje();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirContext : ParserRuleContext {
		public ITerminalNode Decimal() { return GetToken(Combined1Parser.Decimal, 0); }
		public ITerminalNode Hexadecimal() { return GetToken(Combined1Parser.Hexadecimal, 0); }
		public DirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterDir(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitDir(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirContext dir() {
		DirContext _localctx = new DirContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_dir);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = _input.La(1);
			if ( !(_la==Decimal || _la==Hexadecimal) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnsamblajeContext : ParserRuleContext {
		public IToken _Simbolo;
		public NemonicoContext nemonico() {
			return GetRuleContext<NemonicoContext>(0);
		}
		public ITerminalNode[] Simbolo() { return GetTokens(Combined1Parser.Simbolo); }
		public ITerminalNode Simbolo(int i) {
			return GetToken(Combined1Parser.Simbolo, i);
		}
		public ITerminalNode SL() { return GetToken(Combined1Parser.SL, 0); }
		public ITerminalNode Eof() { return GetToken(Combined1Parser.Eof, 0); }
		public DirContext dir() {
			return GetRuleContext<DirContext>(0);
		}
		public ITerminalNode DirectivaB() { return GetToken(Combined1Parser.DirectivaB, 0); }
		public ITerminalNode CONSH() { return GetToken(Combined1Parser.CONSH, 0); }
		public ITerminalNode CONSC() { return GetToken(Combined1Parser.CONSC, 0); }
		public ITerminalNode Directiva() { return GetToken(Combined1Parser.Directiva, 0); }
		public ITerminalNode Hexadecimal() { return GetToken(Combined1Parser.Hexadecimal, 0); }
		public ITerminalNode Decimal() { return GetToken(Combined1Parser.Decimal, 0); }
		public EnsamblajeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ensamblaje; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterEnsamblaje(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitEnsamblaje(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnsamblaje(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnsamblajeContext ensamblaje() {
		EnsamblajeContext _localctx = new EnsamblajeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ensamblaje);
		int _la;
		try {
			State = 87;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Simbolo) {
					{
					State = 42; Match(Simbolo);
					}
				}

				State = 55;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
					{
					State = 45; nemonico();
					State = 48;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case Decimal:
					case Hexadecimal:
						{
						State = 46; dir();
						}
						break;
					case Simbolo:
						{
						State = 47; Match(Simbolo);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 52;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==T__1) {
						{
						State = 50; Match(T__1);
						State = 51; Match(T__2);
						}
					}

					}
					break;
				case T__3:
					{
					State = 54; Match(T__3);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SL) {
					{
					State = 57; Match(SL);
					}
				}

				State = 61;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Eof) {
					{
					State = 60; Match(Eof);
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Simbolo) {
					{
					State = 63; _localctx._Simbolo = Match(Simbolo);
					}
				}

				State = 66; Match(DirectivaB);
				State = 67;
				_la = _input.La(1);
				if ( !(_la==CONSH || _la==CONSC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SL) {
					{
					State = 68; Match(SL);
					}
				}

				State = 72;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Eof) {
					{
					State = 71; Match(Eof);
					}
				}

				System.Console.WriteLine(_localctx._Simbolo);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Simbolo) {
					{
					State = 75; _localctx._Simbolo = Match(Simbolo);
					}
				}

				State = 78; Match(Directiva);
				State = 79;
				_la = _input.La(1);
				if ( !(_la==Decimal || _la==Hexadecimal) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 81;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SL) {
					{
					State = 80; Match(SL);
					}
				}

				State = 84;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Eof) {
					{
					State = 83; Match(Eof);
					}
				}

				System.Console.WriteLine(_localctx._Simbolo);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexadoContext : ParserRuleContext {
		public IndexadoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexado; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterIndexado(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitIndexado(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexado(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexadoContext indexado() {
		IndexadoContext _localctx = new IndexadoContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_indexado);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 89; Match(T__1);
			State = 90; Match(T__2);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode Simbolo() { return GetToken(Combined1Parser.Simbolo, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_fin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(T__4);
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Simbolo) {
				{
				State = 93; Match(Simbolo);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NemonicoContext : ParserRuleContext {
		public NemonicoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nemonico; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterNemonico(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitNemonico(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNemonico(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NemonicoContext nemonico() {
		NemonicoContext _localctx = new NemonicoContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_nemonico);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandoContext : ParserRuleContext {
		public string op;
		public NumeroContext _numero;
		public IToken _Simbolo;
		public NumeroContext numero() {
			return GetRuleContext<NumeroContext>(0);
		}
		public ITerminalNode Simbolo() { return GetToken(Combined1Parser.Simbolo, 0); }
		public OperandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operando; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterOperando(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitOperando(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandoContext operando() {
		OperandoContext _localctx = new OperandoContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_operando);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Decimal:
				{
				State = 98; _localctx._numero = numero();
				_localctx.op = _localctx._numero.Num;
				}
				break;
			case Simbolo:
				{
				State = 101; _localctx._Simbolo = Match(Simbolo);
				_localctx.op = (_localctx._Simbolo!=null?_localctx._Simbolo.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 105; Match(T__1);
				}
			}

			State = 109;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 108; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeroContext : ParserRuleContext {
		public string Num;
		public int a;
		public IToken _Decimal;
		public IToken _Hexadecimal;
		public ITerminalNode Decimal() { return GetToken(Combined1Parser.Decimal, 0); }
		public ITerminalNode Hexadecimal() { return GetToken(Combined1Parser.Hexadecimal, 0); }
		public NumeroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numero; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterNumero(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitNumero(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumero(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeroContext numero() {
		NumeroContext _localctx = new NumeroContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_numero);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; _localctx._Decimal = Match(Decimal);
			_localctx.Num = System.Convert.ToString(int.Parse((_localctx._Decimal!=null?_localctx._Decimal.Text:null),System.Globalization.NumberStyles.HexNumber));
			State = 113; _localctx._Hexadecimal = Match(Hexadecimal);
			_localctx.Num = (_localctx._Hexadecimal!=null?_localctx._Hexadecimal.Text:null);
			System.Console.WriteLine(_localctx._Hexadecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3+x\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4"+
		"\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x5\x2\x1B\n\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5)\n\x5\x3"+
		"\x6\x3\x6\x3\a\x5\a.\n\a\x3\a\x3\a\x3\a\x5\a\x33\n\a\x3\a\x3\a\x5\a\x37"+
		"\n\a\x3\a\x5\a:\n\a\x3\a\x5\a=\n\a\x3\a\x5\a@\n\a\x3\a\x5\a\x43\n\a\x3"+
		"\a\x3\a\x3\a\x5\aH\n\a\x3\a\x5\aK\n\a\x3\a\x3\a\x5\aO\n\a\x3\a\x3\a\x3"+
		"\a\x5\aT\n\a\x3\a\x5\aW\n\a\x3\a\x5\aZ\n\a\x3\b\x3\b\x3\b\x3\t\x3\t\x5"+
		"\t\x61\n\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vj\n\v\x3\v\x5\vm\n\v"+
		"\x3\v\x5\vp\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x2\x2\x2\r\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x2\x5\x3\x2"+
		"\'(\x3\x2$%\x3\x2\b!\x80\x2\x18\x3\x2\x2\x2\x4\x1C\x3\x2\x2\x2\x6 \x3"+
		"\x2\x2\x2\b(\x3\x2\x2\x2\n*\x3\x2\x2\x2\fY\x3\x2\x2\x2\xE[\x3\x2\x2\x2"+
		"\x10^\x3\x2\x2\x2\x12\x62\x3\x2\x2\x2\x14i\x3\x2\x2\x2\x16q\x3\x2\x2\x2"+
		"\x18\x1A\x5\x4\x3\x2\x19\x1B\a\x2\x2\x3\x1A\x19\x3\x2\x2\x2\x1A\x1B\x3"+
		"\x2\x2\x2\x1B\x3\x3\x2\x2\x2\x1C\x1D\x5\x6\x4\x2\x1D\x1E\x5\b\x5\x2\x1E"+
		"\x1F\x5\x10\t\x2\x1F\x5\x3\x2\x2\x2 !\a)\x2\x2!\"\a\x3\x2\x2\"#\x5\n\x6"+
		"\x2#\a\x3\x2\x2\x2$%\x5\f\a\x2%&\x5\b\x5\x2&)\x3\x2\x2\x2\')\x5\f\a\x2"+
		"($\x3\x2\x2\x2(\'\x3\x2\x2\x2)\t\x3\x2\x2\x2*+\t\x2\x2\x2+\v\x3\x2\x2"+
		"\x2,.\a)\x2\x2-,\x3\x2\x2\x2-.\x3\x2\x2\x2.\x39\x3\x2\x2\x2/\x32\x5\x12"+
		"\n\x2\x30\x33\x5\n\x6\x2\x31\x33\a)\x2\x2\x32\x30\x3\x2\x2\x2\x32\x31"+
		"\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x35\a\x4\x2\x2\x35\x37\a\x5\x2\x2"+
		"\x36\x34\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38:\a\x6\x2"+
		"\x2\x39/\x3\x2\x2\x2\x39\x38\x3\x2\x2\x2:<\x3\x2\x2\x2;=\a&\x2\x2<;\x3"+
		"\x2\x2\x2<=\x3\x2\x2\x2=?\x3\x2\x2\x2>@\a\x2\x2\x3?>\x3\x2\x2\x2?@\x3"+
		"\x2\x2\x2@Z\x3\x2\x2\x2\x41\x43\a)\x2\x2\x42\x41\x3\x2\x2\x2\x42\x43\x3"+
		"\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x45\a\"\x2\x2\x45G\t\x3\x2\x2\x46H\a"+
		"&\x2\x2G\x46\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\x3\x2\x2\x2IK\a\x2\x2\x3JI\x3"+
		"\x2\x2\x2JK\x3\x2\x2\x2KL\x3\x2\x2\x2LZ\b\a\x1\x2MO\a)\x2\x2NM\x3\x2\x2"+
		"\x2NO\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\a#\x2\x2QS\t\x2\x2\x2RT\a&\x2\x2SR\x3"+
		"\x2\x2\x2ST\x3\x2\x2\x2TV\x3\x2\x2\x2UW\a\x2\x2\x3VU\x3\x2\x2\x2VW\x3"+
		"\x2\x2\x2WX\x3\x2\x2\x2XZ\b\a\x1\x2Y-\x3\x2\x2\x2Y\x42\x3\x2\x2\x2YN\x3"+
		"\x2\x2\x2Z\r\x3\x2\x2\x2[\\\a\x4\x2\x2\\]\a\x5\x2\x2]\xF\x3\x2\x2\x2^"+
		"`\a\a\x2\x2_\x61\a)\x2\x2`_\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x11\x3\x2"+
		"\x2\x2\x62\x63\t\x4\x2\x2\x63\x13\x3\x2\x2\x2\x64\x65\x5\x16\f\x2\x65"+
		"\x66\b\v\x1\x2\x66j\x3\x2\x2\x2gh\a)\x2\x2hj\b\v\x1\x2i\x64\x3\x2\x2\x2"+
		"ig\x3\x2\x2\x2jl\x3\x2\x2\x2km\a\x4\x2\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2"+
		"mo\x3\x2\x2\x2np\a\x5\x2\x2on\x3\x2\x2\x2op\x3\x2\x2\x2p\x15\x3\x2\x2"+
		"\x2qr\a\'\x2\x2rs\b\f\x1\x2st\a(\x2\x2tu\b\f\x1\x2uv\b\f\x1\x2v\x17\x3"+
		"\x2\x2\x2\x15\x1A(-\x32\x36\x39<?\x42GJNSVY`ilo";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApp1
